------------------------------------------------------- Class: Net::LDAP

Net::LDAP
---------
     This library provides a pure-Ruby implementation of the LDAP client
     protocol, per RFC-2251. It can be used to access any server which
     implements the LDAP protocol.

     Net::LDAP is intended to provide full LDAP functionality while
     hiding the more arcane aspects the LDAP protocol itself, and thus
     presenting as Ruby-like a programming interface as possible.


Quick-start for the Impatient
-----------------------------
     Quick Example of a user-authentication against an LDAP directory:
      require 'rubygems'
      require 'net/ldap'
     
      ldap = Net::LDAP.new
      ldap.host = your_server_ip_address
      ldap.port = 389
      ldap.auth "joe_user", "opensesame"
      if ldap.bind
        # authentication succeeded
      else
        # authentication failed
      end

     Quick Example of a search against an LDAP directory:
      require 'rubygems'
      require 'net/ldap'
     
      ldap = Net::LDAP.new :host => server_ip_address,
           :port => 389,
           :auth => {
                 :method => :simple,
                 :username => "cn=manager,dc=example,dc=com",
                 :password => "opensesame"
           }
     
      filter = Net::LDAP::Filter.eq( "cn", "George*" )
      treebase = "dc=example,dc=com"
     
      ldap.search( :base => treebase, :filter => filter ) do |entry|
        puts "DN: #{entry.dn}"
        entry.each do |attribute, values|
          puts "   #{attribute}:"
          values.each do |value|
            puts "      --->#{value}"
          end
        end
      end
     
      p ldap.get_operation_result


A Brief Introduction to LDAP
----------------------------
     We're going to provide a quick, informal introduction to LDAP
     terminology and typical operations. If you're comfortable with this
     material, skip ahead to "How to use Net::LDAP." If you want a more
     rigorous treatment of this material, we recommend you start with
     the various IETF and ITU standards that relate to LDAP.

     Entities
     LDAP is an Internet-standard protocol used to access directory
     servers. The basic search unit is the _entity,_ which corresponds
     to a person or other domain-specific object. A directory service
     which supports the LDAP protocol typically stores information about
     a number of entities.

     Principals
     LDAP servers are typically used to access information about people,
     but also very often about such items as printers, computers, and
     other resources. To reflect this, LDAP uses the term _entity,_ or
     less commonly, _principal,_ to denote its basic data-storage unit.

     Distinguished Names
     In LDAP's view of the world, an entity is uniquely identified by a
     globally-unique text string called a _Distinguished Name,_
     originally defined in the X.400 standards from which LDAP is
     ultimately derived. Much like a DNS hostname, a DN is a "flattened"
     text representation of a string of tree nodes. Also like DNS (and
     unlike Java package names), a DN expresses a chain of tree-nodes
     written from left to right in order from the most-resolved node to
     the most-general one.

     If you know the DN of a person or other entity, then you can query
     an LDAP-enabled directory for information (attributes) about the
     entity. Alternatively, you can query the directory for a list of
     DNs matching a set of criteria that you supply.

     Attributes
     In the LDAP view of the world, a DN uniquely identifies an entity.
     Information about the entity is stored as a set of _Attributes._ An
     attribute is a text string which is associated with zero or more
     values. Most LDAP-enabled directories store a well-standardized
     range of attributes, and constrain their values according to
     standard rules.

     A good example of an attribute is +sn,+ which stands for "Surname."
     This attribute is generally used to store a person's surname, or
     last name. Most directories enforce the standard convention that an
     entity's +sn+ attribute have _exactly one_ value. In LDAP jargon,
     that means that +sn+ must be _present_ and _single-valued._

     Another attribute is +mail,+ which is used to store email
     addresses. (No, there is no attribute called "email," perhaps
     because X.400 terminology predates the invention of the term
     _email._) +mail+ differs from +sn+ in that most directories permit
     any number of values for the +mail+ attribute, including zero.

     Tree-Base
     We said above that X.400 Distinguished Names are _globally unique._
     In a manner reminiscent of DNS, LDAP supposes that each directory
     server contains authoritative attribute data for a set of DNs
     corresponding to a specific sub-tree of the (notional) global
     directory tree. This subtree is generally configured into a
     directory server when it is created. It matters for this discussion
     because most servers will not allow you to query them unless you
     specify a correct tree-base.

     Let's say you work for the engineering department of Big Company,
     Inc., whose internet domain is bigcompany.com. You may find that
     your departmental directory is stored in a server with a defined
     tree-base of

      ou=engineering,dc=bigcompany,dc=com

     You will need to supply this string as the _tree-base_ when
     querying this directory. (Ou is a very old X.400 term meaning
     "organizational unit." Dc is a more recent term meaning "domain
     component.")

     LDAP Versions
     (stub, discuss v2 and v3)

     LDAP Operations
     The essential operations are: #bind, #search, #add, #modify,
     #delete, and #rename.

     Bind
     #bind supplies a user's authentication credentials to a server,
     which in turn verifies or rejects them. There is a range of
     possibilities for credentials, but most directories support a
     simple username and password authentication.

     Taken by itself, #bind can be used to authenticate a user against
     information stored in a directory, for example to permit or deny
     access to some other resource. In terms of the other LDAP
     operations, most directories require a successful #bind to be
     performed before the other operations will be permitted. Some
     servers permit certain operations to be performed with an
     "anonymous" binding, meaning that no credentials are presented by
     the user. (We're glossing over a lot of platform-specific detail
     here.)

     Search
     Calling #search against the directory involves specifying a
     treebase, a set of _search filters,_ and a list of attribute
     values. The filters specify ranges of possible values for
     particular attributes. Multiple filters can be joined together with
     AND, OR, and NOT operators. A server will respond to a #search by
     returning a list of matching DNs together with a set of attribute
     values for each entity, depending on what attributes the search
     requested.

     Add
     #add specifies a new DN and an initial set of attribute values. If
     the operation succeeds, a new entity with the corresponding DN and
     attributes is added to the directory.

     Modify
     #modify specifies an entity DN, and a list of attribute operations.
     #modify is used to change the attribute values stored in the
     directory for a particular entity. #modify may add or delete
     attributes (which are lists of values) or it change attributes by
     adding to or deleting from their values. Net::LDAP provides three
     easier methods to modify an entry's attribute values:
     #add_attribute, #replace_attribute, and #delete_attribute.

     Delete
     #delete specifies an entity DN. If it succeeds, the entity and all
     its attributes is removed from the directory.

     Rename (or Modify RDN)
     #rename (or #modify_rdn) is an operation added to version 3 of the
     LDAP protocol. It responds to the often-arising need to change the
     DN of an entity without discarding its attribute values. In earlier
     LDAP versions, the only way to do this was to delete the whole
     entity and add it again with a different DN.

     #rename works by taking an "old" DN (the one to change) and a "new
     RDN," which is the left-most part of the DN string. If successful,
     #rename changes the entity DN so that its left-most node
     corresponds to the new RDN given in the request. (RDN, or "relative
     distinguished name," denotes a single tree-node as expressed in a
     DN, which is a chain of tree nodes.)


How to use Net::LDAP
--------------------
     To access Net::LDAP functionality in your Ruby programs, start by
     requiring the library:

      require 'net/ldap'

     If you installed the Gem version of Net::LDAP, and depending on
     your version of Ruby and rubygems, you _may_ also need to require
     rubygems explicitly:

      require 'rubygems'
      require 'net/ldap'

     Most operations with Net::LDAP start by instantiating a Net::LDAP
     object. The constructor for this object takes arguments specifying
     the network location (address and port) of the LDAP server, and
     also the binding (authentication) credentials, typically a username
     and password. Given an object of class Net:LDAP, you can then
     perform LDAP operations by calling instance methods on the object.
     These are documented with usage examples below.

     The Net::LDAP library is designed to be very disciplined about how
     it makes network connections to servers. This is different from
     many of the standard native-code libraries that are provided on
     most platforms, which share bloodlines with the original
     Netscape/Michigan LDAP client implementations. These libraries
     sought to insulate user code from the workings of the network. This
     is a good idea of course, but the practical effect has been
     confusing and many difficult bugs have been caused by the opacity
     of the native libraries, and their variable behavior across
     platforms.

     In general, Net::LDAP instance methods which invoke server
     operations make a connection to the server when the method is
     called. They execute the operation (typically binding first) and
     then disconnect from the server. The exception is Net::LDAP#open,
     which makes a connection to the server and then keeps it open while
     it executes a user-supplied block. Net::LDAP#open closes the
     connection on completion of the block.

------------------------------------------------------------------------

Net::LDAP
---------
     This library provides a pure-Ruby implementation of the LDAP client
     protocol, per RFC-2251. It can be used to access any server which
     implements the LDAP protocol.

     Net::LDAP is intended to provide full LDAP functionality while
     hiding the more arcane aspects the LDAP protocol itself, and thus
     presenting as Ruby-like a programming interface as possible.


Quick-start for the Impatient
-----------------------------
     Quick Example of a user-authentication against an LDAP directory:
      require 'rubygems'
      require 'net/ldap'
     
      ldap = Net::LDAP.new
      ldap.host = your_server_ip_address
      ldap.port = 389
      ldap.auth "joe_user", "opensesame"
      if ldap.bind
        # authentication succeeded
      else
        # authentication failed
      end

     Quick Example of a search against an LDAP directory:
      require 'rubygems'
      require 'net/ldap'
     
      ldap = Net::LDAP.new :host => server_ip_address,
           :port => 389,
           :auth => {
                 :method => :simple,
                 :username => "cn=manager,dc=example,dc=com",
                 :password => "opensesame"
           }
     
      filter = Net::LDAP::Filter.eq( "cn", "George*" )
      treebase = "dc=example,dc=com"
     
      ldap.search( :base => treebase, :filter => filter ) do |entry|
        puts "DN: #{entry.dn}"
        entry.each do |attribute, values|
          puts "   #{attribute}:"
          values.each do |value|
            puts "      --->#{value}"
          end
        end
      end
     
      p ldap.get_operation_result


A Brief Introduction to LDAP
----------------------------
     We're going to provide a quick, informal introduction to LDAP
     terminology and typical operations. If you're comfortable with this
     material, skip ahead to "How to use Net::LDAP." If you want a more
     rigorous treatment of this material, we recommend you start with
     the various IETF and ITU standards that relate to LDAP.

     Entities
     LDAP is an Internet-standard protocol used to access directory
     servers. The basic search unit is the _entity,_ which corresponds
     to a person or other domain-specific object. A directory service
     which supports the LDAP protocol typically stores information about
     a number of entities.

     Principals
     LDAP servers are typically used to access information about people,
     but also very often about such items as printers, computers, and
     other resources. To reflect this, LDAP uses the term _entity,_ or
     less commonly, _principal,_ to denote its basic data-storage unit.

     Distinguished Names
     In LDAP's view of the world, an entity is uniquely identified by a
     globally-unique text string called a _Distinguished Name,_
     originally defined in the X.400 standards from which LDAP is
     ultimately derived. Much like a DNS hostname, a DN is a "flattened"
     text representation of a string of tree nodes. Also like DNS (and
     unlike Java package names), a DN expresses a chain of tree-nodes
     written from left to right in order from the most-resolved node to
     the most-general one.

     If you know the DN of a person or other entity, then you can query
     an LDAP-enabled directory for information (attributes) about the
     entity. Alternatively, you can query the directory for a list of
     DNs matching a set of criteria that you supply.

     Attributes
     In the LDAP view of the world, a DN uniquely identifies an entity.
     Information about the entity is stored as a set of _Attributes._ An
     attribute is a text string which is associated with zero or more
     values. Most LDAP-enabled directories store a well-standardized
     range of attributes, and constrain their values according to
     standard rules.

     A good example of an attribute is +sn,+ which stands for "Surname."
     This attribute is generally used to store a person's surname, or
     last name. Most directories enforce the standard convention that an
     entity's +sn+ attribute have _exactly one_ value. In LDAP jargon,
     that means that +sn+ must be _present_ and _single-valued._

     Another attribute is +mail,+ which is used to store email
     addresses. (No, there is no attribute called "email," perhaps
     because X.400 terminology predates the invention of the term
     _email._) +mail+ differs from +sn+ in that most directories permit
     any number of values for the +mail+ attribute, including zero.

     Tree-Base
     We said above that X.400 Distinguished Names are _globally unique._
     In a manner reminiscent of DNS, LDAP supposes that each directory
     server contains authoritative attribute data for a set of DNs
     corresponding to a specific sub-tree of the (notional) global
     directory tree. This subtree is generally configured into a
     directory server when it is created. It matters for this discussion
     because most servers will not allow you to query them unless you
     specify a correct tree-base.

     Let's say you work for the engineering department of Big Company,
     Inc., whose internet domain is bigcompany.com. You may find that
     your departmental directory is stored in a server with a defined
     tree-base of

      ou=engineering,dc=bigcompany,dc=com

     You will need to supply this string as the _tree-base_ when
     querying this directory. (Ou is a very old X.400 term meaning
     "organizational unit." Dc is a more recent term meaning "domain
     component.")

     LDAP Versions
     (stub, discuss v2 and v3)

     LDAP Operations
     The essential operations are: #bind, #search, #add, #modify,
     #delete, and #rename.

     Bind
     #bind supplies a user's authentication credentials to a server,
     which in turn verifies or rejects them. There is a range of
     possibilities for credentials, but most directories support a
     simple username and password authentication.

     Taken by itself, #bind can be used to authenticate a user against
     information stored in a directory, for example to permit or deny
     access to some other resource. In terms of the other LDAP
     operations, most directories require a successful #bind to be
     performed before the other operations will be permitted. Some
     servers permit certain operations to be performed with an
     "anonymous" binding, meaning that no credentials are presented by
     the user. (We're glossing over a lot of platform-specific detail
     here.)

     Search
     Calling #search against the directory involves specifying a
     treebase, a set of _search filters,_ and a list of attribute
     values. The filters specify ranges of possible values for
     particular attributes. Multiple filters can be joined together with
     AND, OR, and NOT operators. A server will respond to a #search by
     returning a list of matching DNs together with a set of attribute
     values for each entity, depending on what attributes the search
     requested.

     Add
     #add specifies a new DN and an initial set of attribute values. If
     the operation succeeds, a new entity with the corresponding DN and
     attributes is added to the directory.

     Modify
     #modify specifies an entity DN, and a list of attribute operations.
     #modify is used to change the attribute values stored in the
     directory for a particular entity. #modify may add or delete
     attributes (which are lists of values) or it change attributes by
     adding to or deleting from their values. Net::LDAP provides three
     easier methods to modify an entry's attribute values:
     #add_attribute, #replace_attribute, and #delete_attribute.

     Delete
     #delete specifies an entity DN. If it succeeds, the entity and all
     its attributes is removed from the directory.

     Rename (or Modify RDN)
     #rename (or #modify_rdn) is an operation added to version 3 of the
     LDAP protocol. It responds to the often-arising need to change the
     DN of an entity without discarding its attribute values. In earlier
     LDAP versions, the only way to do this was to delete the whole
     entity and add it again with a different DN.

     #rename works by taking an "old" DN (the one to change) and a "new
     RDN," which is the left-most part of the DN string. If successful,
     #rename changes the entity DN so that its left-most node
     corresponds to the new RDN given in the request. (RDN, or "relative
     distinguished name," denotes a single tree-node as expressed in a
     DN, which is a chain of tree nodes.)


How to use Net::LDAP
--------------------
     To access Net::LDAP functionality in your Ruby programs, start by
     requiring the library:

      require 'net/ldap'

     If you installed the Gem version of Net::LDAP, and depending on
     your version of Ruby and rubygems, you _may_ also need to require
     rubygems explicitly:

      require 'rubygems'
      require 'net/ldap'

     Most operations with Net::LDAP start by instantiating a Net::LDAP
     object. The constructor for this object takes arguments specifying
     the network location (address and port) of the LDAP server, and
     also the binding (authentication) credentials, typically a username
     and password. Given an object of class Net:LDAP, you can then
     perform LDAP operations by calling instance methods on the object.
     These are documented with usage examples below.

     The Net::LDAP library is designed to be very disciplined about how
     it makes network connections to servers. This is different from
     many of the standard native-code libraries that are provided on
     most platforms, which share bloodlines with the original
     Netscape/Michigan LDAP client implementations. These libraries
     sought to insulate user code from the workings of the network. This
     is a good idea of course, but the practical effect has been
     confusing and many difficult bugs have been caused by the opacity
     of the native libraries, and their variable behavior across
     platforms.

     In general, Net::LDAP instance methods which invoke server
     operations make a connection to the server when the method is
     called. They execute the operation (typically binding first) and
     then disconnect from the server. The exception is Net::LDAP#open,
     which makes a connection to the server and then keeps it open while
     it executes a user-supplied block. Net::LDAP#open closes the
     connection on completion of the block.

------------------------------------------------------------------------


Constants:
----------
     AsnSyntax:                BER.compile_syntax({       :application
                               => {         :primitive => {           2
                               => :null               # UnbindRequest
                               body
     DefaultAuth:              {:method => :anonymous}
     DefaultHost:              "127.0.0.1"
     DefaultPort:              389
     DefaultTreebase:          "dc=com"
     ResultStrings:            {       0 => "Success",       1 =>
                               "Operations Error",       2 => "Protocol
                               Error",       3 => "Time Limit Exceeded",
                                     4 => "Size Limit Exceeded",      
                               12 => "Unavailable crtical extension",   
                                  14 => "saslBindInProgress",       16
                               => "No Such Attribute",       17 =>
                               "Undefined Attribute Type",       20 =>
                               "Attribute or Value Exists",       32 =>
                               "No Such Object",       34 => "Invalid DN
                               Syntax",       48 => "Inappropriate
                               Authentication",       49 => "Invalid
                               Credentials",       50 => "Insufficient
                               Access Rights",       51 => "Busy",      
                               52 => "Unavailable",       53 =>
                               "Unwilling to perform",       65 =>
                               "Object Class Violation",       68 =>
                               "Entry Already Exists"
     SearchScope_BaseObject:   0
     SearchScope_SingleLevel:  1
     SearchScope_WholeSubtree: 2
     SearchScopes:             [SearchScope_BaseObject,
                               SearchScope_SingleLevel,
                               SearchScope_WholeSubtree]
     StartTlsOid:              "1.3.6.1.4.1.1466.20037"
     VERSION:                  "0.1.0"


Class methods:
--------------
     new, open


Instance methods:
-----------------
     add, add_attribute, auth, authenticate, bind, bind_as, delete,
     delete_attribute, encryption, get_operation_result, modify,
     modify_rdn, open, paged_searches_supported?, rename,
     replace_attribute, search, search_root_dse, search_subschema_entry

Attributes:
     base, host, port
